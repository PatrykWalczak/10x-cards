name: Pull Request Validation

# Uruchamianie na PR do main
on:
  pull_request:
    branches:
      - main
  pull_request_target:
    branches:
      - main

jobs:
  # Job 1: Lintowanie kodu
  lint:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: |
          # Run ESLint and capture output
          npm run lint > eslint-output.txt 2>&1 || true
          
          # Check if there are any errors (not just warnings)
          if grep -q "error" eslint-output.txt; then
            echo "ESLint found errors:"
            cat eslint-output.txt
            exit 1
          else
            echo "ESLint passed - only warnings found (acceptable):"
            cat eslint-output.txt
            exit 0
          fi

      - name: Check formatting
        run: npx prettier --check .

  # Job 2: Testy jednostkowe z coverage
  test:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Upload coverage to artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: coverage/
          retention-days: 5

  # Job 3: Komentarz statusu w PR
  status-comment:
    name: 📝 Status Comment
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: always() && github.event_name == 'pull_request'
    permissions:
      pull-requests: write
    steps:
      - name: Download coverage artifact
        uses: actions/download-artifact@v4
        if: needs.test.result == 'success'
        with:
          name: coverage-report
          path: coverage/

      - name: Read coverage summary
        id: coverage
        if: needs.test.result == 'success'
        run: |
          if [ -f "coverage/coverage-summary.json" ]; then
            COVERAGE=$(cat coverage/coverage-summary.json | grep -o '"pct":[0-9.]*' | head -1 | cut -d':' -f2)
            echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
          else
            echo "coverage=N/A" >> $GITHUB_OUTPUT
          fi

      - name: Create PR comment
        uses: thollander/actions-comment-pull-request@v3
        with:
          message: |
            ## 🚀 Pull Request Validation Results

            | Job | Status | Details |
            |-----|--------|---------|
            | 🔍 Code Quality (Lint) | ${{ needs.lint.result == 'success' && '✅ Passed' || '❌ Failed' }} | ESLint + Prettier |
            | 🧪 Unit Tests | ${{ needs.test.result == 'success' && '✅ Passed' || '❌ Failed' }} | Vitest with coverage |
            | 📊 Test Coverage | ${{ steps.coverage.outputs.coverage != 'N/A' && format('📈 {0}%', steps.coverage.outputs.coverage) || '⚠️ N/A' }} | Overall coverage |

            ### Summary
            ${{ (needs.lint.result == 'success' && needs.test.result == 'success') && '🎉 All checks passed! Ready for review.' || '⚠️ Some checks failed. Please review and fix issues before merging.' }}

            ---
            *Generated by GitHub Actions on ${{ github.sha }}*
          comment_tag: pr-validation
